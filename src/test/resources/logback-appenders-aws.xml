<?xml version="1.0" encoding="UTF-8" ?>
<included>

  <!-- CloudWatch -->

  <appender name="CLOUDWATCH_SYNC"
    class="ch.qos.logback.more.appenders.CloudWatchLogbackAppender">

    <awsConfig>
      <!--
      [Optional] Place AwsCredentials.properties in class path.
      <credentialFilePath>AwsCredentials.properties</credentialFilePath>
      [Optional] Or you can specify AWS profile.
      <profile>production</profile>
      -->
      <region>ap-northeast-1</region>

  </awsConfig>

  <logGroupName>test-log</logGroupName>
  <!-- [Optional] Automatically roll current log stream and resume logging in a new stream.
                  You can create custom Partition key by implementing StreamName interface.
  -->
    <logStreamRolling class="ch.qos.logback.more.appenders.CloudWatchLogbackAppender$CountBasedStreamName">
      <!-- The limit is not exactly checked. The stream can have more than the limit depends on emitInterval and maxFlushTime. -->
      <limit>100000</limit>
    </logStreamRolling>
    <!-- [Optional] Or you can specify static stream name.
    <logStreamName>my-log-stream</logStreamName>
    -->
    <!-- [Optional] Create Log group and stream automatically. -->
    <createLogDestination>true</createLogDestination>
    <!-- The minimum interval millis for each CloudWatch API call. -->
    <emitInterval>100</emitInterval>

    <!-- [Optional] Maximum number of log events for each CloudWatch API call.
    <maxEventCount>300</maxEventCount>
    -->

    <!-- The FastJsonEncoder treats the log as JSON. -->
    <encoder class="ch.qos.logback.more.appenders.encoder.FastJsonEncoder">
      <pattern><![CDATA[{
        "date": "%date{HH:mm:ss.SSS}",
        "thread": "%thread",
        "marker": "%marker",
        "level": "%-5level",
        "logger": "%logger",
        "line": "%line",
        "requestURI": "%X{req.requestURI}",
        "message": "%msg"
      }\n]]></pattern>
      <!-- Remove redandant spaces and lines. -->
      <compressSpace>true</compressSpace>
    </encoder>
  </appender>

  <appender name="CLOUDWATCH" class="ch.qos.logback.classic.AsyncAppender">
    <!-- Max queue size of logs which is waiting to be sent (When it reach to the max size, the log will be disappeared). -->
    <queueSize>999</queueSize>
    <!-- Never block when the queue becomes full. -->
    <neverBlock>true</neverBlock>
    <!-- The default maximum queue flush time allowed during appender stop. 
         If the worker takes longer than this time it will exit, discarding any remaining items in the queue.
         10000 millis
     -->
   <maxFlushTime>1000</maxFlushTime>
    <appender-ref ref="CLOUDWATCH_SYNC" />
  </appender>


  <!-- Kinesis Stream -->

  <appender name="KINESIS_SYNC"
    class="ch.qos.logback.more.appenders.KinesisStreamLogbackAppender">

    <awsConfig>
      <!--
      [Optional] Place AwsCredentials.properties in class path.
      <credentialFilePath>AwsCredentials.properties</credentialFilePath>
      [Optional] Or you can specify AWS profile.
      <profile>production</profile>
      -->
      <region>ap-northeast-1</region>
    </awsConfig>

    <streamName>test-stream</streamName>
    <shardCount>2</shardCount>
    <!-- [Optional] Default RandomPartitionKey. You can create custom Partition key by implementing PartitionKey interface.
                    Tips: If you won't have multiple shard, you can use the partition key for performance.
                    ch.qos.logback.more.appenders.KinesisStreamLogbackAppender$SinglePartitionKey
    -->
    <partitionKey class="ch.qos.logback.more.appenders.KinesisStreamLogbackAppender$RandomPartitionKey" />
    <!-- [Optional] Create the stream automatically. -->
    <createStreamDestination>true</createStreamDestination>
    <!-- The minimum interval millis for each Kinesis API call. -->
    <emitInterval>100</emitInterval>

    <!-- The FastJsonEncoder treats the log as JSON. -->
    <encoder class="ch.qos.logback.more.appenders.encoder.FastJsonEncoder">
      <pattern><![CDATA[{
        "date": "%date{HH:mm:ss.SSS}",
        "thread": "%thread",
        "marker": "%marker",
        "level": "%-5level",
        "logger": "%logger",
        "line": "%line",
        "requestURI": "%X{req.requestURI}",
        "message": "%msg"
      }\n]]></pattern>
      <!-- Remove redandant spaces and lines. -->
      <compressSpace>true</compressSpace>
    </encoder>
  </appender>

  <appender name="KINESIS" class="ch.qos.logback.classic.AsyncAppender">
    <!-- Max queue size of logs which is waiting to be sent (When it reach to the max size, the log will be disappeared). -->
    <queueSize>999</queueSize>
    <!-- Never block when the queue becomes full. -->
    <neverBlock>true</neverBlock>
    <!-- The default maximum queue flush time allowed during appender stop. 
         If the worker takes longer than this time it will exit, discarding any remaining items in the queue.
         10000 millis
     -->
   <maxFlushTime>1000</maxFlushTime>
    <appender-ref ref="KINESIS_SYNC" />
  </appender>

</included>
